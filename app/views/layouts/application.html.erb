<!DOCTYPE html>
<html>
<head>
  <title>SearchPoc</title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body>

  <%= yield %>

</body>
<script type="text/javascript" src='bower_components/jquery/jquery.js'></script>
<script type="text/javascript" src='chosen_v1.0.0/chosen.jquery.js'></script>
<script type="text/javascript" src='node_modules/backbone/node_modules/underscore/underscore.js'></script>
<script type="text/javascript" src='node_modules/backbone/backbone.js'></script>
<script type="text/javascript" src='node_modules/backbone.localstorage/backbone.localstorage.js'></script>
<script type="text/javascript" src='hogan-2.0.0.js'></script>

<script type="text/javascript">

$( document ).ready(function() {

  var Condition = Backbone.Model.extend({
    defaults: function() {
      return {
        group: null,
        text: "Search Term",
        selected: false
      };
    },

    select: function() {
      this.save({selected: true});
    }
  });

  var Conditions = Backbone.Collection.extend({
    model: Condition,
    localStorage: new Backbone.LocalStorage("conditions-backbone"),

    initialize: function(models, options) {
      this.group = options.group;
    }
  });

  var ConditionGroup = Backbone.Model.extend({
    // constructor: function() {
    //   this.conditions = new Conditions(null, {group: this});
    //   this.conditions.on('change', this.save, this);
    //   Backbone.Model.apply(this, arguments);
    // }
  });

  var ConditionGroupList = Backbone.Collection.extend({
    model: ConditionGroup,
    localStorage: new Backbone.LocalStorage("conditiongroups-backbone"),

    nextConditionType: function() {
      if (this.length == 0) {
        return "phase";

      } else if (this.length == 1) {
        return "district";

      } else {
        return "term";
      }
    },

    selectConditionWithText: function(text) {
      var lastGroup = this.last();
      var conditionWithText = lastGroup.conditions.findWhere({text: text});
      conditionWithText.select();
    }
  });

  var ConditionView = Backbone.View.extend({
    tagName: "option",

    render: function() {
      return this.$el.html("This is a test...");
    },
  });

  var AppView = Backbone.View.extend({
    el: $("body"),

    initialize: function() {
      // this.listenTo(ConditionGroups, 'add', this.addOne);
    },

    addOne: function(condition) {
      console.log("Added one!");
      var view = new ConditionView({model: condition});
      this.$("#query option").append(view.render());
    }
  });

  var App = new AppView;

  window.allGroups = new ConditionGroupList;


  window.phaseOfEducation = allGroups.create({
    name: "Phase"
  });

  window.phaseConditions = new Conditions(null, {group: window.phaseOfEducation});
  phaseConditions.create({text: "Primary"});
  phaseConditions.create({text: "Secondary"});

  window.phaseOfEducation.conditions = window.phaseConditions;


  $('#query').chosen();

  $('#query').on('change', function(evt, params) {
    console.log("Chosen changed...");
    allGroups.selectConditionWithText(params.selected);

    // Conditions.remove(Conditions.unselected());

  });



});


</script>
</html>
